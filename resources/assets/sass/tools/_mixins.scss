/****************************************
 * Mixins
 ****************************************/

// Generate basic flexbox functionality with cross-browser compatibility
@mixin flexbox() {
    display: -webkit-flex;
    display: flex;
}

%flexbox { @include flexbox; }

@mixin flex($values) {
    -webkit-flex: $values;
    flex: $values;
}

@mixin order($value) {
    -webkit-order: $value;
    order: $value;
}

@mixin flex-flow($values: (row nowrap)) {
    -webkit-flex-flow: $values;
    flex-flow: $values;
}

@mixin justify-content($value: flex-start) {
    -webkit-justify-content: $value;
    justify-content: $value;
}

@mixin align-items($value: stretch) {
    -webkit-align-items: $value;
    align-items: $value;
}


// Generate the appropriate vendor prefixes with one call.
@mixin vendor($property, $value...) {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    #{$property}: $value;
}


// Apply hover, active, and focus styles with one call.
@mixin attention($self: false) {

    @if($self != false) {

        &,
        &:hover,
        &:active {
            @content;
        }
    }

    @else {

        &:hover,
        &:active {
            @content;
        }
    }
}


// Generate a base font-size and baseline-compatible line-height
@mixin global-font-size($font-size, $line-height: auto, $important: false) {

    @if (type-of($font-size) == number) {
        @if (unit($font-size) != "px") {
            @error "`#{$font-size}` needs to be a pixel value.";
        }
    } @else {
        @error "`#{$font-size}` needs to be a number.";
    }

    @if ($important == true) {
        $important: !important;
    } @else if ($important == false) {
        $important: null;
    } @else {
        @error "`#{$important}` needs to be `true` or `false`."
    }

    font-size: $font-size $important;
    font-size: ($font-size / $base-font-size) * 1rem $important;

    @if ($line-height == 'auto') {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size) $important;
    }

    @else {

        @if (type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {
            line-height: $line-height $important;
        }

        @else if ($line-height != 'none' and $line-height != false) {
            @error "`#{$line-height}` is not a valid value for `$line-height`."
        }

    }

}


// Generate aliases for numbered font weights
@mixin font-weight($font-weight) {

    @if ($font-weight == "regular") {
        font-weight: 300;
    }

    @if ($font-weight == "bold") {
        font-weight: 700;
    }

}


// Pass-through for font sizes, line height, and weights
@mixin font-heading($font-size, $line-height: null, $font-weight: null) {
    @if $line-height {
        font: #{$font-size}/#{$line-height} $font-heading;
    } @else {
        font-size: $font-size;
        font-family: $font-heading;
    }
    @if $font-weight == light {
        font-weight: 300;
    } @else if $font-weight {
        font-weight: $font-weight;
    }
}

@mixin font-heading-sub($font-size, $line-height: null, $font-weight: null) {
    @if $line-height {
        font: #{$font-size}/#{$line-height} $font-heading-sub;
    } @else {
        font-size: $font-size;
        font-family: $font-heading-sub;
    }
    @if $font-weight == medium {
        font-weight: 500;
    } @else if $font-weight {
        font-weight: $font-weight;
    }
    text-transform: uppercase;
}


// Generate all headings with one call
@mixin headings($from: 1, $to: 6) {

    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{

        @for $i from $from through $to{

            h#{$i} {
                @extend %base-heading;
            }
        }
    }
}


// Generate solid and hollow buttons based on applied button colors
@mixin button-colors($background, $color) {
    border: 1px solid $background;
    background-color: $background;
    color: $color;

    @include attention() {
        text-decoration: none;
        border: 1px solid darken($background, 10%);
        background-color: darken($background, 10%);
    }

    &.btn--hollow {
        border: 1px solid $background;
        background: none;
        color: $background;

        @include attention() {
            background-color: $background;
            color: $color;
        }
    }
}


// Grayscale effect
@mixin grayscale($amount: 100%) {
    -webkit-filter: grayscale($amount);
    -ms-filter: gray;
    filter: grayscale($amount);
    filter: gray;
}


// Clearfix mixin
@mixin clearfix() {

    &::after {
        content: "";
        display: table;
        clear: both;
    }
}


// Disabled mixin for fields and buttons
@mixin disabled {
    @include grayscale;
    opacity: .4;
    cursor: default;
    pointer-events: none;

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// Pass defined breakpoint aliases and conditions variable to
// allow 'media-query' mixin to be invoked later
@mixin media-query($mq) {

    $breakpoint-found: false;

    @each $breakpoint in $breakpoints {

        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        @if $mq == $alias and $condition {

            $breakpoint-found: true;

            @media #{$condition} {
                @content;
            }
        }
    }

    @if $breakpoint-found == false{
        @warn "Breakpoint ‘#{$mq}’ does not exist."
    }
}